[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis",
    "section": "",
    "text": "Thank you for visiting. Here you’ll find a collection of my group’s projects showcasing various data analysis techniques.\n\n\n\n\nAn in-depth analysis of the famous Titanic dataset, exploring passenger survival patterns factors. This project includes:\n\nExploratory data analysis\nStatistical visualizations\nSurvival pattern analysis"
  },
  {
    "objectID": "index.html#featured-project",
    "href": "index.html#featured-project",
    "title": "Data Analysis",
    "section": "",
    "text": "An in-depth analysis of the famous Titanic dataset, exploring passenger survival patterns factors. This project includes:\n\nExploratory data analysis\nStatistical visualizations\nSurvival pattern analysis"
  },
  {
    "objectID": "Dati_titanic/titanic_verifica_dati.html",
    "href": "Dati_titanic/titanic_verifica_dati.html",
    "title": "Data Analysis Website",
    "section": "",
    "text": "#Probabilità di sopravvivenza al Titanic Le analisi sono state svolte sui dati dei passeggeri del Titanic (training set Titanic). ##Matrice di correlazione\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Carica il dataset\ntitanic_data = pd.read_csv('titanic.csv')\n\n# Prepara i dati\n# Converti le variabili categoriche in numeriche\ntitanic_data['Sex'] = titanic_data['Sex'].map({'male': 0, 'female': 1})\ntitanic_data['Embarked'] = titanic_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})  # Converti 'Embarked' in numerico\n\n# Rimuovi le righe con valori NaN in 'Age'\ntitanic_data = titanic_data.dropna(subset=['Age'])\n\n# Seleziona le colonne di interesse\ncorrelation_data = titanic_data[['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n\n# Calcola la matrice di correlazione\ncorrelation_matrix = correlation_data.corr()\n\n# Crea un heatmap (callerogramma) usando solo matplotlib\nplt.figure(figsize=(10, 8))\nplt.imshow(correlation_matrix, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\n\n# Aggiungi le etichette\nplt.xticks(range(len(correlation_matrix.columns)), correlation_matrix.columns, rotation=45)\nplt.yticks(range(len(correlation_matrix.index)), correlation_matrix.index)\n\n# Aggiungi i valori della matrice\nfor (i, j), val in np.ndenumerate(correlation_matrix):\n    plt.text(j, i, f'{val:.2f}', ha='center', va='center', color='white' if abs(val) &lt; 0.5 else 'black')\n\nplt.title('Matrice di Correlazione - Titanic Dataset')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nAttraverso il precedente correlogramma abbiamo trovato che i dati che incidono di più sulla sopravvivenza sono il sesso, l’età e la classe. ##Matrice di correlazione tra i dati scelti\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Carica il dataset\ntitanic_data = pd.read_csv('titanic.csv')\n\n# Prepara i dati\n# Converti le variabili categoriche in numeriche\ntitanic_data['Sex'] = titanic_data['Sex'].map({'male': 0, 'female': 1})\n\n# Seleziona le colonne di interesse\ncorrelation_data = titanic_data[['Survived', 'Pclass', 'Sex', 'Age']]\n\n# Calcola la matrice di correlazione\ncorrelation_matrix = correlation_data.corr()\n\n# Crea un heatmap (callerogramma) usando solo matplotlib\nplt.figure(figsize=(8, 6))\nplt.imshow(correlation_matrix, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\n\n# Aggiungi le etichette\nplt.xticks(range(len(correlation_matrix.columns)), correlation_matrix.columns, rotation=45)\nplt.yticks(range(len(correlation_matrix.index)), correlation_matrix.index)\n\n# Aggiungi i valori della matrice\nfor (i, j), val in np.ndenumerate(correlation_matrix):\n    plt.text(j, i, f'{val:.2f}', ha='center', va='center', color='white' if abs(val) &lt; 0.5 else 'black')\n\nplt.title('Matrice di Correlazione tra i dati scelti')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n##Grafico a torta ###Relazione tra maschi sopravvisuti e femmine sopravvisute\n\nimport csv\nimport matplotlib.pyplot as plt\n\n# Inizializzare i contatori\nmale_survived = 0\nfemale_survived = 0\n\n# Leggere il file CSV\nwith open('titanic.csv', mode='r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        if row['Sex'] == 'male':\n            if row['Survived'] == '1':\n                male_survived += 1\n        elif row['Sex'] == 'female':\n            if row['Survived'] == '1':\n                female_survived += 1\n\n# Dati per il grafico a torta\nlabels = ['Maschi Sopravvissuti', 'Femmine Sopravvissute']\nvalues = [male_survived, female_survived]\n\n# Creare il grafico a torta\nplt.figure(figsize=(8, 6))\nplt.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=['lightblue', 'pink'])\nplt.title('Sopravvissuti del Titanic per Sesso')\nplt.axis('equal')  # Per rendere il grafico a torta un cerchio\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n##Grafico a barre ###Relazione tra le classi dell’equipaggio\n\nimport csv\nimport matplotlib.pyplot as plt\n\n# Inizializzare i contatori per le classi\nclass_groups = {\n    '1ª Classe': {'total': 0, 'survived': 0},\n    '2ª Classe': {'total': 0, 'survived': 0},\n    '3ª Classe': {'total': 0, 'survived': 0}\n}\n\n# Leggere il file CSV\nwith open('titanic.csv', mode='r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        pclass = row['Pclass']\n        survived = row['Survived']\n        \n        # Incrementa il totale per la classe\n        if pclass == '1':\n            class_groups['1ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['1ª Classe']['survived'] += 1\n        elif pclass == '2':\n            class_groups['2ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['2ª Classe']['survived'] += 1\n        elif pclass == '3':\n            class_groups['3ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['3ª Classe']['survived'] += 1\n\n# Dati per il grafico\nlabels = list(class_groups.keys())\ntotal_values = [class_groups[cls]['total'] for cls in labels]\nsurvived_values = [class_groups[cls]['survived'] for cls in labels]\n\n# Creare il grafico a barre\nlarghezza = 0.4\nposizione = range(len(labels))  # Posizioni delle barre\n\nplt.figure(figsize=(10, 6))\nplt.bar(posizione, total_values, label=\"Totale Persone\", width=larghezza, color=\"lightgray\")\nplt.bar(posizione, survived_values, label=\"Sopravvissuti\", width=larghezza, color=\"blue\", alpha=0.7)\n\n# Aggiungere etichette e titolo\nplt.title('Totale Persone e Sopravvissuti per Classe')\nplt.xlabel('Classe')\nplt.ylabel('Numero di Persone')\nplt.xticks(posizione, labels)  # Centrare le etichette\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n##Grafico a torta ###Relazione la classe dell’equipaggio\n\nimport csv\nimport matplotlib.pyplot as plt\n\n# Inizializzare i contatori per le classi\nclass_groups = {\n    '1ª Classe': {'total': 0, 'survived': 0},\n    '2ª Classe': {'total': 0, 'survived': 0},\n    '3ª Classe': {'total': 0, 'survived': 0}\n}\n\n# Leggere il file CSV\nwith open('titanic.csv', mode='r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        pclass = row['Pclass']\n        survived = row['Survived']\n        \n        # Incrementa il totale per la classe\n        if pclass == '1':\n            class_groups['1ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['1ª Classe']['survived'] += 1\n        elif pclass == '2':\n            class_groups['2ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['2ª Classe']['survived'] += 1\n        elif pclass == '3':\n            class_groups['3ª Classe']['total'] += 1\n            if survived == '1':\n                class_groups['3ª Classe']['survived'] += 1\n\n# Creare i grafici a torta\nplt.figure(figsize=(15, 5))\n\n# Grafico a torta per la 1ª Classe\nplt.subplot(1, 3, 1)\nlabels_1 = ['Sopravvissuti', 'Morti']\nsizes_1 = [class_groups['1ª Classe']['survived'], class_groups['1ª Classe']['total'] - class_groups['1ª Classe']['survived']]\nplt.pie(sizes_1, labels=labels_1, autopct='%1.1f%%', startangle=90, colors=['lightblue', 'lightgray'])\nplt.title('1ª Classe')\n\n# Grafico a torta per la 2ª Classe\nplt.subplot(1, 3, 2)\nlabels_2 = ['Sopravvissuti', 'Morti']\nsizes_2 = [class_groups['2ª Classe']['survived'], class_groups['2ª Classe']['total'] - class_groups['2ª Classe']['survived']]\nplt.pie(sizes_2, labels=labels_2, autopct='%1.1f%%', startangle=90, colors=['lightgreen', 'lightgray'])\nplt.title('2ª Classe')\n\n# Grafico a torta per la 3ª Classe\nplt.subplot(1, 3, 3)\nlabels_3 = ['Sopravvissuti', 'Morti']\nsizes_3 = [class_groups['3ª Classe']['survived'], class_groups['3ª Classe']['total'] - class_groups['3ª Classe']['survived']]\nplt.pie(sizes_3, labels=labels_3, autopct='%1.1f%%', startangle=90, colors=['salmon', 'lightgray'])\nplt.title('3ª Classe')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n##Grafico a barre ###Relazione le fasce d’età dell’equipaggio\n\nimport csv\nimport matplotlib.pyplot as plt\n\n# Inizializzare i contatori per le fasce di età\nage_groups = {\n    '0-12': {'total': 0, 'survived': 0},\n    '13-19': {'total': 0, 'survived': 0},\n    '20-30': {'total': 0, 'survived': 0},\n    '31-50': {'total': 0, 'survived': 0},\n    '51-70': {'total': 0, 'survived': 0},\n    '71+': {'total': 0, 'survived': 0}\n}\n\n# Leggere il file CSV\nwith open('titanic.csv', mode='r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        age = row['Age']\n        survived = row['Survived']\n        \n        # Controlla se l'età è un numero\n        if age:\n            age = float(age)\n            # Incrementa il totale per la fascia di età\n            if age &lt;= 12:\n                age_groups['0-12']['total'] += 1\n                if survived == '1':\n                    age_groups['0-12']['survived'] += 1\n            elif 13 &lt;= age &lt;= 19:\n                age_groups['13-19']['total'] += 1\n                if survived == '1':\n                    age_groups['13-19']['survived'] += 1\n            elif 20 &lt;= age &lt;= 30:\n                age_groups['20-30']['total'] += 1\n                if survived == '1':\n                    age_groups['20-30']['survived'] += 1\n            elif 31 &lt;= age &lt;= 50:\n                age_groups['31-50']['total'] += 1\n                if survived == '1':\n                    age_groups['31-50']['survived'] += 1\n            elif 51 &lt;= age &lt;= 70:\n                age_groups['51-70']['total'] += 1\n                if survived == '1':\n                    age_groups['51-70']['survived'] += 1\n            elif age &gt;= 71:  # 71+\n                age_groups['71+']['total'] += 1\n                if survived == '1':\n                    age_groups['71+']['survived'] += 1\n\n# Dati per il grafico\nlabels = list(age_groups.keys())\ntotal_values = [age_groups[age]['total'] for age in labels]\nsurvived_values = [age_groups[age]['survived'] for age in labels]\n\n# Creare il grafico a barre\nlarghezza = 0.4\nposizione = range(len(labels))  # Posizioni delle barre\n\nplt.figure(figsize=(10, 6))\nplt.bar(posizione, total_values, label=\"Totale Persone\", width=larghezza, color=\"lightgray\")\nplt.bar(posizione, survived_values, label=\"Sopravvissuti\", width=larghezza, color=\"blue\", alpha=0.7)\n\n# Aggiungere etichette e titolo\nplt.title('Totale Persone e Sopravvissuti per Fascia di Età')\nplt.xlabel('Fasce di Età')\nplt.ylabel('Numero di Persone')\nplt.xticks(posizione, labels)  # Centrare le etichette\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n##Coclusioni In conclusione abbiamo trovato che il passeggero ideale è una raggazza tra gli 0 e 12 anni in prima classe come Helen Louraine Allison"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Data Analysis Projects",
    "section": "",
    "text": "Welcome to my data analysis projects page. Here you’ll find various data analysis projects I’ve worked on, including:\n\nTitanic Dataset Analysis\nMore projects coming soon…\n\nBrowse through the projects below to explore different analyses and insights.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nTitanic Dataset Analysis\n\n\n\n\n\n\ndata-analysis\n\n\npython\n\n\nvisualization\n\n\n\n\n\n\n\n\n\nJan 28, 2025\n\n\nData Analyst\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/titanic.html",
    "href": "posts/titanic.html",
    "title": "Titanic Dataset Analysis",
    "section": "",
    "text": "This analysis explores the famous Titanic dataset, examining passenger information and survival rates from the tragic voyage. Using Python, we’ll investigate various factors that influenced survival probability, including passenger class, gender, age, and other variables. Through data visualization and statistical analysis, we’ll uncover patterns from this historical dataset."
  },
  {
    "objectID": "posts/titanic.html#introduction",
    "href": "posts/titanic.html#introduction",
    "title": "Titanic Dataset Analysis",
    "section": "",
    "text": "This analysis explores the famous Titanic dataset, examining passenger information and survival rates from the tragic voyage. Using Python, we’ll investigate various factors that influenced survival probability, including passenger class, gender, age, and other variables. Through data visualization and statistical analysis, we’ll uncover patterns from this historical dataset."
  }
]